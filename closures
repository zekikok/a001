
https://go.dev/tour/moretypes/25

Function closures 

Go functions may be closures. A closure is a function value that references variables from outside its body. 
The function may access and assign to the referenced variables; in this sense the function is "bound" to the variables.
For example, the adder function returns a closure. Each closure is bound to its own sum variable.

package main
import "fmt"
func adder() func(int) int {
	sum := 0
	return func(x int) int {
		sum += x
		return sum
	}
}

func main() {
	pos, neg := adder(), adder()
	for i := 0; i < 4; i++ {
		fmt.Println(
			pos(i),
			neg(-2*i),
		)
	}
}
// Çıktı
0 0
1 -2
3 -6
6 -12
 
---------------
package main
import "fmt"

func outer() func() int {
    count := 0
    return func() int {
        count++
        return count
    }
}

func main() {
	increment := outer()
  fmt.Println(increment())
  fmt.Println(increment())
  fmt.Println(increment())
}
// Çıktı  1   2  3


