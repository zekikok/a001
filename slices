 
/*   ARRAYS
/*
------------------------------------------------------------------------------------------------------------------------

	Diziye ilk değer verilirken dizi [] içerisi boş bırakılabilir ya da ... (ellipsis) atomu yazılabilir. 
           Aslında []   içerisinin boş bırakılması aslında bir slice yaratmak anlamındadır

------------------------------------------------------------------------------------------------------------------------
*/

package main
import (
	"fmt"
)

func main() {
	a := [...]int{1, 2, 3, 4, 5}
	s := []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}

	for _, val := range a {
		fmt.Printf("%02d ", val)
	}
	fmt.Println()
	for _, dow := range s {
		fmt.Printf("%s\n", dow)
	}
}

/*
------------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örneği inceleyiniz. Örnekte slice'ın kopyalanmadığına adresin kopyalandığına dikkat ediniz
------------------------------------------------------------------------------------------------------------------------
*/

package main

import (
	"fmt"
)

func main() {
	a := []int{1, 2, 3, 4, 5}
	b := a

	for _, val := range a {
		fmt.Printf("%02d ", val)
	}

	fmt.Println()

	for _, val := range b {
		fmt.Printf("%02d ", val)
	}

	fmt.Println()

	for i, _ := range a {
		a[i] *= 2
	}

	for _, val := range a {
		fmt.Printf("%02d ", val)
	}

	fmt.Println()

	for _, val := range b {
		fmt.Printf("%02d ", val)
	}

	fmt.Println()
}

/*
------------------------------------------------------------------------------------------------------------------------

	Aşağıdaki örneği inceleyiniz. Örnekte slice'ın kopyalanmadığına adresin kopyalandığına dikkat ediniz

------------------------------------------------------------------------------------------------------------------------
*/

package main

import (
	"fmt"
	"strings"
)

func main() {
	s := []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	upper := s

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, val := range upper {
		fmt.Printf("%s ", val)
	}

	fmt.Println()

	for i, dow := range upper {
		s[i] = strings.ToUpper(dow)
	}

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, dow := range upper {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()
}


/*
------------------------------------------------------------------------------------------------------------------------

	Aşağıdaki örneği inceleyiniz

------------------------------------------------------------------------------------------------------------------------
*/

package main

import (
	"fmt"
	"strings"
)

func main() {
	s := []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	upper := make([]string, len(s))

	copy(upper, s)

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, val := range upper {
		fmt.Printf("%s ", val)
	}

	fmt.Println()

	for i, dow := range upper {
		s[i] = strings.ToUpper(dow)
	}

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, dow := range upper {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()
}

/*
------------------------------------------------------------------------------------------------------------------------

	Aslında diziler atama durumunda doğrudan kopyalanır

------------------------------------------------------------------------------------------------------------------------
*/

package main

import (
	"fmt"
	"strings"
)

func main() {
	s := [7]string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	upper := s

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, val := range upper {
		fmt.Printf("%s ", val)
	}

	fmt.Println()

	for i, dow := range upper {
		s[i] = strings.ToUpper(dow)
	}

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, dow := range upper {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()
}


------------------------------------------------------------------------------------------------------------------------

	Bir dizi fonksiyona geçirilirken doğrudan geçirildiğinde aslında kopyalama işlemi yapılır. Bu da dizinin uzunluğuna
	göre maliyetli olabilmektedir. Bu durumda çok büyük diziler için fonksiyona doğrudan geçirmek yerine pointer ile
	geçirmek veya dizi yerine slice kullanmak daha doğru bir yaklaşımdır. Aşağıdaki örnekte 7 elemalı bir dizi stdout'a
	bastırılmaktadır. Dikkat edilirse burada dizi uzunluğu da verilmelidir ve fonksiyona o uzunlukta bir dizi geçilmelidir
------------------------------------------------------------------------------------------------------------------------
*/

package main
import (
	"fmt"
)

func printDayOfWeeks(s [7]string) {
	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}
	fmt.Println()
}
func main() {
	s := [7]string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	printDayOfWeeks(s)
}

/*---------------------
package main
import (
	"fmt"
	"strings"
)

func printDayOfWeeks(s [7]string) {
	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}
	fmt.Println()
}
func upperDayOfWeeks(s *[7]string) {
	for i, _ := range s {
		s[i] = strings.ToUpper(s[i])
	}
}

func main() {
	s := [...]string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}

	printDayOfWeeks(s)
	upperDayOfWeeks(&s)
	printDayOfWeeks(s)
}

/*****************    SLICES  *****************

package main
import "fmt"

func main() {

	var a [10]int
	fmt.Println("a :", a)
	b := a
	c := a[:]
	d := a[0:4]
	c[0] = 10
	c[1] = 11
	c[2] = 12
	c[3] = 13
	c[4] = 14

	fmt.Printf("a :  %p %v \n", &a[0], a)
	fmt.Printf("b :  %p %v \n", &b[0], b)
	fmt.Printf("c :  %p %v \n", &c[0], c)
	fmt.Printf("d :  %p %v \n", &d[0], d)
	fmt.Println("****************************************")
	// b = append(b, 33)   compile  error : first argument to append must be a slice; have b (variable of type [10]int)
	// c = append(b, 3)    complile error : first argument to append must be a slice; have b (variable of type [10]int)

	d = append(d, 33)
	fmt.Printf("d :  %p %v \n", &d[0], d)

	fmt.Println("----------------------------------------")
	b = a
	fmt.Printf("b :  %p %v \n", &b[0], b)
	//  b = c            complile error  : cannot use c (variable of type []int) as [10]int value in assignment
	//  b = d            complile error  : cannot use d (variable of type []int) as [10]int value in assignment

	//
	fmt.Println("=======================================")
	d[0] = 99

	fmt.Printf("a :  %p %v \n", &a[0], a)
	fmt.Printf("b :  %p %v \n", &b[0], b)
	fmt.Printf("c :  %p %v \n", &c[0], c)
	fmt.Printf("d :  %p %v \n", &d[0], d)

   fmt.Println()
   fmt.Println("=======** copy **  ==============")

s := []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
x := make([]string, len(s))
	fmt.Printf("s :  %p %v \n", &s[0], s)
	fmt.Printf("x :  %p %v \n", &x[0], x)
  copy(x, s)
	fmt.Printf("s :  %p %v \n", &s[0], s)
	fmt.Printf("x :  %p %v \n", &x[0], x)

}

/* çıktı
a : [0 0 0 0 0 0 0 0 0 0]
a :  0xc000018050 [10 11 12 13 14 0 0 0 0 0] 
b :  0xc0000180f0 [0 0 0 0 0 0 0 0 0 0] 
c :  0xc000018050 [10 11 12 13 14 0 0 0 0 0] 
d :  0xc000018050 [10 11 12 13] 
****************************************
d :  0xc000018050 [10 11 12 13 33] 
----------------------------------------
b :  0xc0000180f0 [10 11 12 13 33 0 0 0 0 0] 
=======================================
a :  0xc000018050 [99 11 12 13 33 0 0 0 0 0] 
b :  0xc0000180f0 [10 11 12 13 33 0 0 0 0 0] 
c :  0xc000018050 [99 11 12 13 33 0 0 0 0 0] 
d :  0xc000018050 [99 11 12 13 33] 

=======** copy **  ==============
s :  0xc0000b6000 [Sunday Monday Tuesday Wednesday Thursday Friday Saturday] 
x :  0xc0000b6070 [      ] 
s :  0xc0000b6000 [Sunday Monday Tuesday Wednesday Thursday Friday Saturday] 
x :  0xc0000b6070 [Sunday Monday Tuesday Wednesday Thursday Friday Saturday] 

-------------------------------------------
   İNCELE
https://go.dev/blog/slices-intro
--------------------------------------------
*/




