 
/*   ARRAYS
/*
------------------------------------------------------------------------------------------------------------------------

	Diziye ilk değer verilirken dizi [] içerisi boş bırakılabilir ya da ... (ellipsis) atomu yazılabilir. 
           Aslında []   içerisinin boş bırakılması aslında bir slice yaratmak anlamındadır

------------------------------------------------------------------------------------------------------------------------
*/

package main
import (
	"fmt"
)

func main() {
	a := [...]int{1, 2, 3, 4, 5}
	s := []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}

	for _, val := range a {
		fmt.Printf("%02d ", val)
	}
	fmt.Println()
	for _, dow := range s {
		fmt.Printf("%s\n", dow)
	}
}

/*
------------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örneği inceleyiniz. Örnekte slice'ın kopyalanmadığına adresin kopyalandığına dikkat ediniz
------------------------------------------------------------------------------------------------------------------------
*/

package main

import (
	"fmt"
)

func main() {
	a := []int{1, 2, 3, 4, 5}
	b := a

	for _, val := range a {
		fmt.Printf("%02d ", val)
	}

	fmt.Println()

	for _, val := range b {
		fmt.Printf("%02d ", val)
	}

	fmt.Println()

	for i, _ := range a {
		a[i] *= 2
	}

	for _, val := range a {
		fmt.Printf("%02d ", val)
	}

	fmt.Println()

	for _, val := range b {
		fmt.Printf("%02d ", val)
	}

	fmt.Println()
}

/*
------------------------------------------------------------------------------------------------------------------------

	Aşağıdaki örneği inceleyiniz. Örnekte slice'ın kopyalanmadığına adresin kopyalandığına dikkat ediniz

------------------------------------------------------------------------------------------------------------------------
*/

package main

import (
	"fmt"
	"strings"
)

func main() {
	s := []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	upper := s

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, val := range upper {
		fmt.Printf("%s ", val)
	}

	fmt.Println()

	for i, dow := range upper {
		s[i] = strings.ToUpper(dow)
	}

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, dow := range upper {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()
}


/*
------------------------------------------------------------------------------------------------------------------------

	Aşağıdaki örneği inceleyiniz

------------------------------------------------------------------------------------------------------------------------
*/

package main

import (
	"fmt"
	"strings"
)

func main() {
	s := []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	upper := make([]string, len(s))

	copy(upper, s)

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, val := range upper {
		fmt.Printf("%s ", val)
	}

	fmt.Println()

	for i, dow := range upper {
		s[i] = strings.ToUpper(dow)
	}

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, dow := range upper {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()
}

/*
------------------------------------------------------------------------------------------------------------------------

	Aslında diziler atama durumunda doğrudan kopyalanır

------------------------------------------------------------------------------------------------------------------------
*/

package main

import (
	"fmt"
	"strings"
)

func main() {
	s := [7]string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	upper := s

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, val := range upper {
		fmt.Printf("%s ", val)
	}

	fmt.Println()

	for i, dow := range upper {
		s[i] = strings.ToUpper(dow)
	}

	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()

	for _, dow := range upper {
		fmt.Printf("%s ", dow)
	}

	fmt.Println()
}


------------------------------------------------------------------------------------------------------------------------

	Bir dizi fonksiyona geçirilirken doğrudan geçirildiğinde aslında kopyalama işlemi yapılır. Bu da dizinin uzunluğuna
	göre maliyetli olabilmektedir. Bu durumda çok büyük diziler için fonksiyona doğrudan geçirmek yerine pointer ile
	geçirmek veya dizi yerine slice kullanmak daha doğru bir yaklaşımdır. Aşağıdaki örnekte 7 elemalı bir dizi stdout'a
	bastırılmaktadır. Dikkat edilirse burada dizi uzunluğu da verilmelidir ve fonksiyona o uzunlukta bir dizi geçilmelidir
------------------------------------------------------------------------------------------------------------------------
*/

package main
import (
	"fmt"
)

func printDayOfWeeks(s [7]string) {
	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}
	fmt.Println()
}
func main() {
	s := [7]string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	printDayOfWeeks(s)
}

/*---------------------
package main
import (
	"fmt"
	"strings"
)

func printDayOfWeeks(s [7]string) {
	for _, dow := range s {
		fmt.Printf("%s ", dow)
	}
	fmt.Println()
}
func upperDayOfWeeks(s *[7]string) {
	for i, _ := range s {
		s[i] = strings.ToUpper(s[i])
	}
}

func main() {
	s := [...]string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}

	printDayOfWeeks(s)
	upperDayOfWeeks(&s)
	printDayOfWeeks(s)
}

/*****************    SLICES  *****************

package main
import "fmt"

func main() {

	var a [10]int
	fmt.Println("a :", a)
	b := a
	c := a[:]
	d := a[0:4]
	c[0] = 10
	c[1] = 11
	c[2] = 12
	c[3] = 13
	c[4] = 14

	fmt.Printf("a :  %p %v \n", &a[0], a)
	fmt.Printf("b :  %p %v \n", &b[0], b)
	fmt.Printf("c :  %p %v \n", &c[0], c)
	fmt.Printf("d :  %p %v \n", &d[0], d)
	fmt.Println("****************************************")
	// b = append(b, 33)   compile  error : first argument to append must be a slice; have b (variable of type [10]int)
	// c = append(b, 3)    complile error : first argument to append must be a slice; have b (variable of type [10]int)

	d = append(d, 33)
	fmt.Printf("d :  %p %v \n", &d[0], d)

	fmt.Println("----------------------------------------")
	b = a
	fmt.Printf("b :  %p %v \n", &b[0], b)
	//  b = c            complile error  : cannot use c (variable of type []int) as [10]int value in assignment
	//  b = d            complile error  : cannot use d (variable of type []int) as [10]int value in assignment

	//
	fmt.Println("=======================================")
	d[0] = 99

	fmt.Printf("a :  %p %v \n", &a[0], a)
	fmt.Printf("b :  %p %v \n", &b[0], b)
	fmt.Printf("c :  %p %v \n", &c[0], c)
	fmt.Printf("d :  %p %v \n", &d[0], d)

   fmt.Println()
   fmt.Println("=======** copy **  ==============")

s := []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
x := make([]string, len(s))
	fmt.Printf("s :  %p %v \n", &s[0], s)
	fmt.Printf("x :  %p %v \n", &x[0], x)
  copy(x, s)
	fmt.Printf("s :  %p %v \n", &s[0], s)
	fmt.Printf("x :  %p %v \n", &x[0], x)

}

/* çıktı
a : [0 0 0 0 0 0 0 0 0 0]
a :  0xc000018050 [10 11 12 13 14 0 0 0 0 0] 
b :  0xc0000180f0 [0 0 0 0 0 0 0 0 0 0] 
c :  0xc000018050 [10 11 12 13 14 0 0 0 0 0] 
d :  0xc000018050 [10 11 12 13] 
****************************************
d :  0xc000018050 [10 11 12 13 33] 
----------------------------------------
b :  0xc0000180f0 [10 11 12 13 33 0 0 0 0 0] 
=======================================
a :  0xc000018050 [99 11 12 13 33 0 0 0 0 0] 
b :  0xc0000180f0 [10 11 12 13 33 0 0 0 0 0] 
c :  0xc000018050 [99 11 12 13 33 0 0 0 0 0] 
d :  0xc000018050 [99 11 12 13 33] 

=======** copy **  ==============
s :  0xc0000b6000 [Sunday Monday Tuesday Wednesday Thursday Friday Saturday] 
x :  0xc0000b6070 [      ] 
s :  0xc0000b6000 [Sunday Monday Tuesday Wednesday Thursday Friday Saturday] 
x :  0xc0000b6070 [Sunday Monday Tuesday Wednesday Thursday Friday Saturday] 


/*              


/*************************      ÖNEMLİ  *****************************
/*************************      ÖNEMLİ  *****************************

package main
import (
	"fmt"
)

func main() {

	//   GO da string degisken bir karekter dizisi gibi kullanılabiliyor.

	var x string = "Zeki"
	for i, _ := range x {
		fmt.Printf("index %d :  %c  %d\n", i, x[i], x[i])
	}

	/*  Ama x in karekterlerinin adersini alamıyoruz. yani &x[0]   ERROR
	      error --> invalid operation: cannot take address of x[i] (value of type byte)

		for i, _ := range x {
		    //fmt.Printf("index %d :  %p %c  %d\n", i, &x[i], x[i], x[i])      // invalid operation: cannot take address of x[i] (value of type byte)
			ptr := &x[i]						        //   ""
			fmt.Printf("index %d :  %p %c  %d\n", i, ptr, x[i], x[i])
		}
	*/

}
/* ÇIKTI
index 0 :  Z  90
index 1 :  e  101
index 2 :  k  107
index 3 :  i  105
*/

/*-------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

package main

import (
	"fmt"
	"unsafe"
)

func main() {

	var a [4]string = [4]string{"ali", "zeki", "ahmet", "su"}

	fmt.Println("--------------------------------------------------------------")
	fmt.Println("index    adresi         degeri                    uzunlugu")
	fmt.Println("--------------------------------------------------------------")
	for i, _ := range a {
		fmt.Printf("%5d   %p    %-20s    %5d \n", i, &a[i], a[i], len(a[i]))
		//fmt.Printf("index 0 : %d , adres: %p , Deger: %s , len : %d \n", i, &a[i], a[i], len(a[i]))
	}

	/*
		for i, _ := range a {
			fmt.Printf("index 0 : %d ,%p  %c \n", i, &a[i][0], a[i][0])  // invalid operation: cannot take address of a[i][0] (value of type byte)
		}
	*/

	fmt.Println("--------------------------------------------------------------")
	fmt.Println("YUKARIDAKİ ÇIKTIYI İNCELERSEK ; En uzun eleman  ahmet  5 karakter olamasına ragmen adresler 16 byte artmış. Yani her bir eleman için 16 byte harcamış ")
	fmt.Println("Toplam :  4*16 = 64 byte     ")
	fmt.Println()
	fmt.Println("  Bir elamanın uzunlugunu artıralım  16  yapalım.")

	var b [4]string = [4]string{"ali", "zekikok12zekikok", "ahmet", "su"}

	fmt.Println("--------------------------------------------------------------")
	fmt.Println("index    adresi         degeri                    uzunlugu")
	fmt.Println("--------------------------------------------------------------")
	for i, _ := range b {
		fmt.Printf("%5d   %p    %-20s    %5d \n", i, &b[i], b[i], len(b[i]))

	}

	fmt.Println()
	fmt.Println("  Bir elamanın uzunlugunu artıralım 16 dan büyük yapalım.   olsun")

	var c [4]string = [4]string{"ali", "zekikok12zekikok1234567fffffffffffffffffffffffffffassdsdddddddddddddddd", "ahmet", "su"}

	fmt.Println("--------------------------------------------------------------")
	fmt.Println("index    adresi         degeri                    uzunlugu")
	fmt.Println("--------------------------------------------------------------")
	for i, _ := range c {
		fmt.Printf("%5d   %p    %-20s    %5d \n", i, &c[i], c[i], len(c[i]))

	}

	fmt.Println("--------------------------------------------------------------")
	cx := c[1]
	fmt.Printf("c[1]  türü, adresi, degeri, uzunlugu : %T %p    %-20s    %5d   \n", cx, &cx, cx, len(cx))
	fmt.Println("--------------------------------------------------------------")

	fmt.Printf("a     : %d byte \n", unsafe.Sizeof(a))
	fmt.Printf("c     : %d byte \n", unsafe.Sizeof(c))
	fmt.Printf("c[1]  : %d byte \n", unsafe.Sizeof(c[1]))
	fmt.Printf("*(&c[1])  : %v \n", *(&c[1]))

/*
    Actually, there is a 16 byte difference (since the addresses are in hex), which would correspond to the slice layout described in here, that is:
    Data pointer (8 bytes)
    Length (int, 4 bytes)
    Capacity (int, 4 bytes)
*/


}

// CIKTI
--------------------------------------------------------------
index    adresi         degeri                    uzunlugu
--------------------------------------------------------------
    0   0xc000024080    ali                         3 
    1   0xc000024090    zeki                        4 
    2   0xc0000240a0    ahmet                       5 
    3   0xc0000240b0    su                          2 
--------------------------------------------------------------
YUKARIDAKİ ÇIKTIYI İNCELERSEK ; En uzun eleman  ahmet  5 karakter olamasına ragmen adresler 16 byte artmış. Yani her bir eleman için 16 byte harcamış 
Toplam :  4*16 = 64 byte     

  Bir elamanın uzunlugunu artıralım  16  yapalım.
--------------------------------------------------------------
index    adresi         degeri                    uzunlugu
--------------------------------------------------------------
    0   0xc0000240c0    ali                         3 
    1   0xc0000240d0    zekikok12zekikok           16 
    2   0xc0000240e0    ahmet                       5 
    3   0xc0000240f0    su                          2 

  Bir elamanın uzunlugunu artıralım 16 dan büyük yapalım.   olsun
--------------------------------------------------------------
index    adresi         degeri                    uzunlugu
--------------------------------------------------------------
    0   0xc000024100    ali                         3 
    1   0xc000024110    zekikok12zekikok1234567fffffffffffffffffffffffffffassdsdddddddddddddddd       71 
    2   0xc000024120    ahmet                       5 
    3   0xc000024130    su                          2 
--------------------------------------------------------------
c[1]  türü, adresi, degeri, uzunlugu : string 0xc000014130    zekikok12zekikok1234567fffffffffffffffffffffffffffassdsdddddddddddddddd       71   
--------------------------------------------------------------
a     : 64 byte 
c     : 64 byte 
c[1]  : 16 byte 
*(&c[1])  : zekikok12zekikok1234567fffffffffffffffffffffffffffassdsdddddddddddddddd 


*/

--------------------------------------
  İNCELE    https://go.dev/blog/slices

  Bu blog dan alıntılar  bu konuya devam edilecek........
--------------------------------------

package main

import (
	"fmt"
)

func AddOneToEachElement(slice []byte) {
	for i := range slice {
		slice[i]++
	}
}

func SubtractOneFromLength(slice []byte) []byte {
	slice = slice[0 : len(slice)-1]
	return slice

	/*
	   Here we see that the contents of a slice argument can be modified by a function, but its header cannot.

	   	The length stored in the slice variable is not modified by the call to the function,
	   	since the function is passed a copy of the slice header, not the original.
	   	Thus if we want to write a function that modifies the header, we must return it as a result parameter,
	   	just as we have done here. The slice variable is unchanged but the returned value has the new length, which is then stored in newSlice,
	*/
}

func PtrSubtractOneFromLength(slicePtr *[]byte) {
	slice := *slicePtr
	*slicePtr = slice[0 : len(slice)-1]
}

func main() {
	var buffer [256]byte

	for i := 0; i < 256; i++ {
		buffer[i] = byte(i)
	}
		fmt.Println(buffer)
		fmt.Println("--------------------------------------------------------------")

	slice := buffer[10:20]

		fmt.Println("before", slice)
	AddOneToEachElement(slice)
		fmt.Println("after", slice)
		fmt.Println("--------------------------------------------------------------")

		fmt.Println("Before: len(slice) =", len(slice))
	newSlice := SubtractOneFromLength(slice)
		fmt.Println("After:  len(slice) =", len(slice))
		fmt.Println("After:  len(newSlice) =", len(newSlice))

		fmt.Println("--------------------------------------------------------------")
		fmt.Println("----- Pointers to slices: Method receivers -----------")
		fmt.Println("Before: len(slice) =", len(slice))
	PtrSubtractOneFromLength(&slice)
		fmt.Println("After:  len(slice) =", len(slice))

}

/*  output 
[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .... 255]
--------------------------------------------------------------
before [10 11 12 13 14 15 16 17 18 19]
after [11 12 13 14 15 16 17 18 19 20]
--------------------------------------------------------------
Before: len(slice) = 10
After:  len(slice) = 10
After:  len(newSlice) = 9
--------------------------------------------------------------
----- Pointers to slices: Method receivers -----------
Before: len(slice) = 10


*/

YUKARIYA DEVAM EDECEĞİM.

Aşagıdaki  sitede de slice konusu güzel anlatılmış...  

https://divan.dev/posts/avoid_gotchas/
-------------------------------------------













